import requests
import re
from colorama import Fore, Style, init
from .plugin_base import BasePlugin, PluginMetadata, PluginCategory

# Init colorama (Windows/Linux)
init(autoreset=True)

class Plugin(BasePlugin):
    """Searches for Odoo CVEs in the NVD database using the detected version"""
    
    # For testing purposes only - set to None in production
    # TEST_VERSION = "18"  # Example: Test with Odoo 18
    TEST_VERSION = None
    
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="CVE Scanner",
            description="Searches for known CVEs affecting the detected Odoo version using the NVD database",
            author="bohmiiidd",
            version="1.1.0",
            category=PluginCategory.SECURITY,
            requires_auth=False,
            requires_connection=True,
            external_dependencies=["requests", "colorama"]
        )
    
    def run(self, target_url, database=None, username=None, password=None, connection=None):
        if self.TEST_VERSION:
            version = self.TEST_VERSION
            print(Fore.YELLOW + f"[!] Running in test mode with hardcoded version: {version}")
        else:
            if not self.validate_requirements(connection=connection):
                return "Error: This plugin requires an active connection to detect Odoo version"
            
            if connection:
                version_info = connection.get_version()
                if not version_info:
                    print(Fore.RED + "[-] Could not detect Odoo version")
                    return "Error: Unable to detect Odoo version. Version detection is required for CVE scanning."
                else:
                    raw_version = version_info.get("server_version")
                    if not raw_version:
                        print(Fore.RED + "[-] Server version not available in connection info")
                        return "Error: Server version not available. Cannot perform CVE scan without version information."
                    
                    version = normalize_version(raw_version)
                    if not version:
                        print(Fore.RED + f"[-] Could not parse version from: {raw_version}")
                        return f"Error: Unable to parse version from '{raw_version}'"
                    
                    print(Fore.GREEN + f"[+] Detected Odoo version: {raw_version} (searching for: {version})")
            else:
                print(Fore.RED + "[!] No connection provided - version detection failed")
                return "Error: No connection available for version detection. CVE scanning requires version information."

        # Query NVD
        try:
            print(Fore.BLUE + f"[*] Querying NVD database for Odoo {version} vulnerabilities...")
            data = search_nvd(version)
        except Exception as e:
            print(Fore.RED + f"[-] Error querying NVD: {e}")
            return f"Error: Failed to query NVD database - {e}"

        vulns = data.get("vulnerabilities", [])
        if not vulns:
            print(Fore.YELLOW + f"[-] No CVEs found for Odoo {version}")
            return f"No CVEs found for Odoo version {version}"

        print(Fore.GREEN + f"[+] Found {len(vulns)} unique CVE(s) for Odoo {version}:\n")

        results = []
        for vuln in vulns:
            cve = vuln["cve"]
            cve_id = cve["id"]
            desc = safe_get_description(cve)
            score = format_score(cve)
            refs = format_references(cve)

            if score == "N/A":
                sev_color = Fore.WHITE
            else:
                try:
                    score_float = float(score)
                    if score_float >= 9:
                        sev_color = Fore.RED + Style.BRIGHT
                    elif score_float >= 7:
                        sev_color = Fore.MAGENTA
                    elif score_float >= 4:
                        sev_color = Fore.YELLOW
                    else:
                        sev_color = Fore.GREEN
                except (ValueError, TypeError):
                    sev_color = Fore.WHITE

            print(sev_color + f"[{cve_id}] CVSS: {score}")
            print(Fore.CYAN + f"  Description: {desc}")
            print(Fore.BLUE + "  References:")
            for r in refs:
                print(Fore.WHITE + f"    - {r}")
            print("-" * 80)
            
            results.append({
                "cve_id": cve_id,
                "cvss_score": score,
                "description": desc,
                "references": refs
            })

        return f"CVE scan completed. Found {len(vulns)} vulnerabilities for Odoo {version}"


def normalize_version(version_string):
    """Extract major version number from Odoo version string"""
    match = re.search(r'(\d+)', str(version_string))
    return match.group(1) if match else None

def search_nvd(version):
    """Query NVD for Odoo CVEs for a given version"""
    url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    
    search_terms = [
        f"odoo {version}",
        f"odoo {version}.0", 
        f"odoo community {version}",
        f"odoo enterprise {version}"
    ]
    
    all_cves = []
    for term in search_terms:
        try:
            params = {"keywordSearch": term}
            resp = requests.get(url, params=params, timeout=15)
            resp.raise_for_status()
            data = resp.json()
            vulns = data.get("vulnerabilities", [])
            all_cves.extend(vulns)
        except requests.RequestException:
            continue 
    
    seen_cves = set()
    unique_cves = []
    for vuln in all_cves:
        cve_id = vuln["cve"]["id"]
        if cve_id not in seen_cves:
            seen_cves.add(cve_id)
            unique_cves.append(vuln)
    
    return {"vulnerabilities": unique_cves}

def format_score(cve):
    """Extract CVSS score if available"""
    metrics = cve.get("metrics", {})
    if "cvssMetricV31" in metrics:
        return metrics["cvssMetricV31"][0]["cvssData"]["baseScore"]
    if "cvssMetricV30" in metrics:
        return metrics["cvssMetricV30"][0]["cvssData"]["baseScore"]
    if "cvssMetricV2" in metrics:
        return metrics["cvssMetricV2"][0]["cvssData"]["baseScore"]
    return "N/A"

def safe_get_description(cve):
    """Safely extract CVE description"""
    descriptions = cve.get("descriptions", [])
    if descriptions and len(descriptions) > 0:
        return descriptions[0].get("value", "No description available")
    return "No description available"

def format_references(cve):
    """Extract first 2 references"""
    refs = [r["url"] for r in cve.get("references", [])]
    return refs[:2] if refs else ["No references"]

